apply plugin: 'jacoco'
apply plugin: 'com.android.application'
apply plugin: 'com.getkeepsafe.dexcount'
apply plugin: 'com.github.kt3k.coveralls'

android {
	compileSdkVersion 23
	buildToolsVersion '23.0.1'

	defaultConfig {
		applicationId 'com.mgaetan89.showsrage'
		minSdkVersion 15
		targetSdkVersion 23
		versionCode 16
		versionName '1.1'
		resConfigs 'en', 'fr'
		resConfigs 'anydpi', 'hdpi', 'mdpi', 'xhdpi', 'xxhdpi', 'xxxhdpi'
	}

	compileOptions {
		sourceCompatibility JavaVersion.VERSION_1_7
		targetCompatibility JavaVersion.VERSION_1_7
	}

	signingConfigs {
		release {
			try {
				Properties properties = new Properties()
				properties.load(project.rootProject.file('local.properties').newDataInputStream())

				keyAlias properties.getProperty('signing.keyAlias', '')
				keyPassword properties.getProperty('signing.keyPassword', '')
				storeFile file(properties.getProperty('signing.storeFile', ''))
				storePassword properties.getProperty('signing.storePassword', '')
			} catch (FileNotFoundException ignore) {
				System.out.println('local.properties file is missing. Signing is disabled')
			}
		}
	}

	buildTypes {
		debug {
			applicationIdSuffix '.dev'
			testCoverageEnabled true
		}

		release {
			minifyEnabled false
			proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'

			if (project.rootProject.file('local.properties').exists()) {
				signingConfig signingConfigs.release
			}
		}
	}

	lintOptions {
		abortOnError false
	}

	testOptions {
		unitTests {
			returnDefaultValues = true
		}
	}
}

jacoco {
	toolVersion = '0.7.4.201502262128'
}

// From https://github.com/nenick/android-gradle-template/blob/master/App/build.gradle
task jacocoTestReport(type: JacocoReport, dependsOn: ['test']) {
	group = 'Reporting'
	description = 'Generates Jacoco coverage reports: XML and HTML'
	//outputs.upToDateWhen { false }

	// use hidden configuration, for details look into JacocoPlugin.groovy
	jacocoClasspath = project.configurations['androidJacocoAnt']

	// exclude auto-generated classes and tests
	def fileFilter = ['**/R.class', '**/R$*.class', '**/BuildConfig.*', '**/Manifest*.*', '**/*Test*.*', 'android/**/*.*']
	def debugTree = fileTree(dir: "${project.buildDir}/intermediates/classes/debug", excludes: fileFilter)
	def mainSrc = "${project.projectDir}/src/main/java"

	sourceDirectories = files([mainSrc])
	classDirectories = files([debugTree])
	executionData = fileTree(dir: project.projectDir, includes: ['**/*.exec', '**/*.ec'])

	reports {
		csv {
			enabled = false
		}

		html {
			enabled = true
			destination = "${buildDir}/reports/jacoco"
		}

		xml {
			enabled = true
			destination = "${buildDir}/reports/jacoco/test/jacocoTestReport.xml"
		}
	}
}

dependencies {
	compile 'com.android.support:appcompat-v7:23.0.1'
	compile 'com.android.support:cardview-v7:23.0.1'
	compile 'com.android.support:customtabs:23.0.1'
	compile 'com.android.support:design:23.0.1'
	compile 'com.android.support:mediarouter-v7:23.0.1'
	compile 'com.android.support:palette-v7:23.0.1'
	compile 'com.android.support:recyclerview-v7:23.0.1'
	compile 'com.android.support:support-annotations:23.0.1'
	compile 'com.android.support:support-v4:23.0.1'
	compile 'com.github.bumptech.glide:glide:3.6.1'
	compile 'com.github.bumptech.glide:okhttp-integration:1.3.1'
	compile 'com.squareup.okhttp:okhttp:2.5.0'
	compile 'com.squareup.okhttp:okhttp-urlconnection:2.5.0'
	compile 'com.squareup.retrofit:retrofit:1.9.0'

	testCompile('com.squareup.assertj:assertj-android:1.1.0') {
		exclude group: 'com.android.support', module: 'support-annotations'
	}
	testCompile 'junit:junit:4.12'
	testCompile 'org.mockito:mockito-core:2.0.31-beta'
}
